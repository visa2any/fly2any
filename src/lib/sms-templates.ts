// SMS Templates - Central de Comunica√ß√£o Omnichannel
// Templates autom√°ticos para diferentes cen√°rios SMS

export interface SMSTemplate {
  id: string;
  name: string;
  trigger: string;
  content: string;
  variables: string[];
  maxLength: number;
  category: 'greeting' | 'off_hours' | 'quote' | 'follow_up' | 'confirmation' | 'support';
}

export const SMS_TEMPLATES: Record<string, SMSTemplate> = {
  // SAUDA√á√ïES E PRIMEIRO CONTATO
  greeting_business_hours: {
    id: 'sms_greeting_business',
    name: 'Sauda√ß√£o Hor√°rio Comercial',
    trigger: 'first_contact_business_hours',
    content: `üõ´ Ol√°! Bem-vindo √† Fly2Any!

‚úàÔ∏è Especialistas em voos EUA-Brasil
üéØ Cota√ß√£o gratuita em at√© 2h
üì± Como posso ajudar hoje?

Para mais agilidade:
WhatsApp: (555) 123-4567`,
    variables: [],
    maxLength: 160,
    category: 'greeting'
  },

  greeting_off_hours: {
    id: 'sms_greeting_off_hours',
    name: 'Sauda√ß√£o Fora do Hor√°rio',
    trigger: 'first_contact_off_hours',
    content: `üõ´ Fly2Any - Recebemos sua mensagem!

üïê Estamos fora do hor√°rio comercial
‚è∞ Seg-Sex: 9h-18h (EST)

Um especialista retornar√° pela manh√£.
Para emerg√™ncias: WhatsApp (555) 123-4567`,
    variables: [],
    maxLength: 160,
    category: 'off_hours'
  },

  // COTA√á√ïES E VENDAS
  quote_request: {
    id: 'sms_quote_request',
    name: 'Solicita√ß√£o de Cota√ß√£o',
    trigger: 'keywords: cota√ß√£o, pre√ßo, voo, passagem',
    content: `‚úàÔ∏è Perfeito! Para cota√ß√£o de voos preciso:

üìç Origem e destino
üìÖ Datas (ida/volta)
üë• N√∫mero de passageiros
üé´ Classe preferida

üöÄ Resposta em at√© 2h!
üí¨ WhatsApp: (555) 123-4567`,
    variables: [],
    maxLength: 160,
    category: 'quote'
  },

  quote_follow_up: {
    id: 'sms_quote_followup',
    name: 'Follow-up Cota√ß√£o',
    trigger: 'quote_sent_24h_ago',
    content: `üõ´ Fly2Any aqui!

‚úàÔ∏è Viu nossa cota√ß√£o de voos?
üí∞ Pre√ßos especiais v√°lidos at√© {{expiry_date}}

‚ùì D√∫vidas? Responda este SMS
üìû Ou ligue: (555) 123-4567

üéØ Garantimos o melhor pre√ßo!`,
    variables: ['expiry_date'],
    maxLength: 160,
    category: 'follow_up'
  },

  // CONFIRMA√á√ïES E RESERVAS
  booking_confirmation: {
    id: 'sms_booking_confirmation',
    name: 'Confirma√ß√£o de Reserva',
    trigger: 'booking_completed',
    content: `üéâ RESERVA CONFIRMADA!

‚úàÔ∏è Voo: {{flight_details}}
üìÖ Data: {{departure_date}}
üé´ Localizador: {{booking_reference}}

üìß Detalhes enviados por email
üì± D√∫vidas: (555) 123-4567

‚úÖ Boa viagem!`,
    variables: ['flight_details', 'departure_date', 'booking_reference'],
    maxLength: 160,
    category: 'confirmation'
  },

  payment_reminder: {
    id: 'sms_payment_reminder',
    name: 'Lembrete de Pagamento',
    trigger: 'payment_pending_24h',
    content: `‚è∞ LEMBRETE - Fly2Any

üí≥ Pagamento pendente para:
‚úàÔ∏è {{flight_route}}
üìÖ Vencimento: {{due_date}}

üí∞ Valor: {{amount}}
üîó Link: {{payment_link}}

üìû Ajuda: (555) 123-4567`,
    variables: ['flight_route', 'due_date', 'amount', 'payment_link'],
    maxLength: 160,
    category: 'confirmation'
  },

  // SUPORTE E ATENDIMENTO
  support_general: {
    id: 'sms_support_general',
    name: 'Suporte Geral',
    trigger: 'keywords: ajuda, problema, suporte',
    content: `üÜò Fly2Any Suporte

üì± Como podemos ajudar?
1Ô∏è‚É£ Altera√ß√£o de voo
2Ô∏è‚É£ Cancelamento
3Ô∏è‚É£ Reembolso
4Ô∏è‚É£ Check-in

Responda o n√∫mero ou:
üìû (555) 123-4567`,
    variables: [],
    maxLength: 160,
    category: 'support'
  },

  flight_delay: {
    id: 'sms_flight_delay',
    name: 'Atraso de Voo',
    trigger: 'flight_status_delayed',
    content: `‚ö†Ô∏è ATUALIZA√á√ÉO DE VOO

‚úàÔ∏è Voo {{flight_number}}
üìÖ {{original_time}} ‚Üí {{new_time}}
‚è±Ô∏è Atraso: {{delay_duration}}

üìß Detalhes no email
üîÑ N√£o √© necess√°ria nova reserva
üìû D√∫vidas: (555) 123-4567`,
    variables: ['flight_number', 'original_time', 'new_time', 'delay_duration'],
    maxLength: 160,
    category: 'support'
  },

  // PROMO√á√ïES E MARKETING
  promotion_flash_sale: {
    id: 'sms_flash_sale',
    name: 'Promo√ß√£o Flash',
    trigger: 'marketing_campaign',
    content: `üî• FLASH SALE - 24H APENAS!

‚úàÔ∏è Voos EUA-Brasil
üí∞ AT√â 40% OFF
üé´ A partir de $\${starting_price}

üö® √öltimas vagas!
üîó Reserve: {{booking_link}}
üìû (555) 123-4567`,
    variables: ['starting_price', 'booking_link'],
    maxLength: 160,
    category: 'follow_up'
  },

  birthday_special: {
    id: 'sms_birthday',
    name: 'Oferta Anivers√°rio',
    trigger: 'customer_birthday',
    content: `üéÇ FELIZ ANIVERS√ÅRIO, {{customer_name}}!

üéÅ Presente especial da Fly2Any:
‚úàÔ∏è 25% OFF em qualquer voo
üóìÔ∏è V√°lido at√© {{expiry_date}}

üîó C√≥digo: ANIVER25
üì± Use em: {{website_link}}

üéâ Boa viagem!`,
    variables: ['customer_name', 'expiry_date', 'website_link'],
    maxLength: 160,
    category: 'follow_up'
  }
};

// Classe para gerenciar templates SMS
export class SMSTemplateManager {
  
  // Obter template por ID
  static getTemplate(templateId: string): SMSTemplate | null {
    return SMS_TEMPLATES[templateId] || null;
  }

  // Obter templates por categoria
  static getTemplatesByCategory(category: SMSTemplate['category']): SMSTemplate[] {
    return Object.values(SMS_TEMPLATES).filter(template => template.category === category);
  }

  // Processar template com vari√°veis
  static processTemplate(templateId: string, variables: Record<string, string> = {}): string {
    const template = this.getTemplate(templateId);
    if (!template) {
      throw new Error(`Template ${templateId} not found`);
    }

    let content = template.content;
    
    // Substituir vari√°veis
    template.variables.forEach(variable => {
      const value = variables[variable] || `{{${variable}}}`;
      content = content.replace(new RegExp(`{{${variable}}}`, 'g'), value);
    });

    return content;
  }

  // Validar comprimento da mensagem
  static validateLength(content: string, maxLength: number = 160): boolean {
    return content.length <= maxLength;
  }

  // Obter template baseado em trigger/contexto
  static getTemplateByTrigger(trigger: string, context: any = {}): SMSTemplate | null {
    const now = new Date();
    const hour = now.getHours();
    const isBusinessHours = hour >= 9 && hour < 18;

    // Primeira mensagem do cliente
    if (trigger === 'first_contact') {
      return isBusinessHours ? 
        this.getTemplate('greeting_business_hours') : 
        this.getTemplate('greeting_off_hours');
    }

    // Palavras-chave de cota√ß√£o
    if (trigger.includes('cota√ß√£o') || trigger.includes('pre√ßo') || trigger.includes('voo')) {
      return this.getTemplate('quote_request');
    }

    // Palavras-chave de suporte
    if (trigger.includes('ajuda') || trigger.includes('problema') || trigger.includes('suporte')) {
      return this.getTemplate('support_general');
    }

    // Follow-up de cota√ß√£o
    if (trigger === 'quote_followup') {
      return this.getTemplate('quote_follow_up');
    }

    // Confirma√ß√µes
    if (trigger === 'booking_confirmed') {
      return this.getTemplate('booking_confirmation');
    }

    // Anivers√°rio
    if (trigger === 'birthday' && context.customer_name) {
      return this.getTemplate('birthday_special');
    }

    return null;
  }

  // Listar todos os templates
  static getAllTemplates(): SMSTemplate[] {
    return Object.values(SMS_TEMPLATES);
  }

  // Buscar templates por texto
  static searchTemplates(query: string): SMSTemplate[] {
    const lowercaseQuery = query.toLowerCase();
    return Object.values(SMS_TEMPLATES).filter(template => 
      template.name.toLowerCase().includes(lowercaseQuery) ||
      template.content.toLowerCase().includes(lowercaseQuery) ||
      template.trigger.toLowerCase().includes(lowercaseQuery)
    );
  }
}

// Utilit√°rios para SMS
export class SMSUtils {
  
  // Limpar e validar n√∫mero de telefone
  static cleanPhoneNumber(phone: string): string {
    return phone.replace(/\D/g, '');
  }

  // Validar n√∫mero de telefone brasileiro
  static validateBrazilianPhone(phone: string): boolean {
    const cleaned = this.cleanPhoneNumber(phone);
    return /^55\d{10,11}$/.test(cleaned);
  }

  // Validar n√∫mero de telefone americano
  static validateUSPhone(phone: string): boolean {
    const cleaned = this.cleanPhoneNumber(phone);
    return /^1\d{10}$/.test(cleaned);
  }

  // Formatar n√∫mero para exibi√ß√£o
  static formatPhoneForDisplay(phone: string): string {
    const cleaned = this.cleanPhoneNumber(phone);
    
    if (cleaned.startsWith('55')) {
      // Formato brasileiro: +55 (11) 99999-9999
      return `+55 (${cleaned.substring(2, 4)}) ${cleaned.substring(4, 9)}-${cleaned.substring(9)}`;
    } else if (cleaned.startsWith('1')) {
      // Formato americano: +1 (555) 123-4567
      return `+1 (${cleaned.substring(1, 4)}) ${cleaned.substring(4, 7)}-${cleaned.substring(7)}`;
    }
    
    return `+${cleaned}`;
  }

  // Detectar hor√°rio comercial baseado no timezone
  static isBusinessHours(timezone: string = 'America/New_York'): boolean {
    const now = new Date();
    const hour = parseInt(now.toLocaleString('en-US', { 
      timeZone: timezone, 
      hour12: false, 
      hour: 'numeric' 
    }));
    
    const day = now.getDay(); // 0 = Sunday, 6 = Saturday
    
    // Segunda a sexta, 9h √†s 18h
    return day >= 1 && day <= 5 && hour >= 9 && hour < 18;
  }
}

export default SMSTemplateManager;