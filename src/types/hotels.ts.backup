/**
 * Complete TypeScript types for Hotel Booking System
 * Covers all data structures, API responses, and UI states
 */

// ===== BASE TYPES =====

export interface Coordinates {
  latitude: number;
  longitude: number;
}

export interface Price {
  amount: number;
  currency: string;
  formatted: string;
}

export interface Image {
  url: string;
  description?: string;
  width?: number;
  height?: number;
  isMain?: boolean;
}

export interface Address {
  street?: string;
  city: string;
  state?: string;
  country: string;
  postalCode?: string;
  coordinates?: Coordinates;
}

// ===== LOCATION & DESTINATION TYPES =====

export interface Destination {
  id: string;
  name: string;
  type: 'city' | 'airport' | 'landmark' | 'region';
  country: string;
  countryCode: string;
  coordinates?: Coordinates;
  popularityScore?: number;
  hotelCount?: number;
}

export interface PopularDestination extends Destination {
  averagePrice: Price;
  featuredImage: string;
  description: string;
  averageRating: number;
  bestTimeToVisit?: string[];
}

// ===== HOTEL TYPES =====

export interface HotelAmenity {
  id: string;
  name: string;
  category: 'general' | 'business' | 'connectivity' | 'food' | 'recreation' | 'services' | 'transportation';
  icon?: string;
  description?: string;
  isFree?: boolean;
}

export interface RoomAmenity {
  id: string;
  name: string;
  category: 'comfort' | 'entertainment' | 'food' | 'bathroom' | 'technology';
  icon?: string;
  isFree?: boolean;
}

export interface RoomType {
  id: string;
  name: string;
  description?: string;
  maxOccupancy: number;
  bedTypes: Array<{
    type: string;
    count: number;
  }>;
  size?: {
    value: number;
    unit: 'sqm' | 'sqft';
  };
  amenities: RoomAmenity[];
  images: Image[];
}

export interface Rate {
  id: string;
  rateId: string;
  roomType: RoomType;
  boardType: 'room_only' | 'breakfast' | 'half_board' | 'full_board' | 'all_inclusive';
  price: Price;
  originalPrice?: Price;
  discountPercentage?: number;
  currency: string;
  isRefundable: boolean;
  isFreeCancellation: boolean;
  cancellationDeadline?: string;
  maxOccupancy: number;
  availableRooms: number;
  totalPrice: Price;
  taxes: Price[];
  fees: Array<{
    name: string;
    price: Price;
    isIncluded: boolean;
  }>;
  paymentOptions: Array<{
    type: 'pay_now' | 'pay_later' | 'pay_at_hotel';
    description: string;
  }>;
  promotions?: Array<{
    title: string;
    description: string;
    discount?: number;
  }>;
}

export interface Hotel {
  id: string;
  name: string;
  description?: string;
  starRating: number;
  guestRating?: number;
  reviewCount?: number;
  location: {
    address: Address;
    coordinates: Coordinates;
    landmarks?: Array<{
      name: string;
      distance: number;
      unit: 'km' | 'miles';
      type: 'airport' | 'metro' | 'attraction' | 'beach' | 'city_center';
    }>;
  };
  contact?: {
    phone?: string;
    email?: string;
    website?: string;
  };
  images: Image[];
  amenities: HotelAmenity[];
  policies?: {
    checkIn: string;
    checkOut: string;
    children?: string;
    pets?: string;
    extraBeds?: string;
    smoking?: string;
  };
  rates?: Rate[];
  lowestRate?: Price;
  highlights?: string[];
  chainName?: string;
  brandName?: string;
  hotelClass?: string;
  sustainability?: {
    level: number;
    certifications: string[];
  };
}

// ===== SEARCH TYPES =====

export interface HotelSearchParams {
  destination: string;
  destinationType: 'city' | 'hotel' | 'airport' | 'coordinates';
  checkIn: Date;
  checkOut: Date;
  adults: number;
  children: number;
  childrenAges: number[];
  rooms: number;
  currency: string;
}

export interface HotelFilters {
  priceRange: {
    min: number;
    max: number;
  };
  starRating: number[];
  guestRating: number;
  amenities: string[];
  boardTypes: string[];
  hotelChains: string[];
  distanceFromCenter: number;
  paymentOptions: string[];
  cancellationPolicy: 'free' | 'non_refundable' | 'all';
  instantConfirmation: boolean;
}

export interface SortOptions {
  field: 'price' | 'rating' | 'distance' | 'stars' | 'popularity';
  direction: 'asc' | 'desc';
}

export interface HotelSearchResponse {
  hotels: Hotel[];
  totalResults: number;
  searchId: string;
  filters: {
    priceRange: { min: number; max: number };
    starRatings: number[];
    amenities: HotelAmenity[];
    boardTypes: string[];
    hotelChains: string[];
  };
  currency: string;
  checkIn: string;
  checkOut: string;
  guests: {
    adults: number;
    children: number;
    rooms: number;
  };
}

// ===== BOOKING TYPES =====

export interface Guest {
  title: 'Mr' | 'Mrs' | 'Ms' | 'Miss' | 'Dr' | 'Prof';
  firstName: string;
  lastName: string;
  isMainGuest?: boolean;
  dateOfBirth?: string;
  nationality?: string;
  passportNumber?: string;
  passportExpiry?: string;
}

export interface ContactInfo {
  email: string;
  phone: string;
  whatsapp?: string;
  address?: Address;
}

export interface BookingFormData {
  guests: Guest[];
  contact: ContactInfo;
  specialRequests?: string;
  arrivalTime?: string;
  preferences?: {
    room: 'quiet' | 'high_floor' | 'low_floor' | 'twin_beds' | 'double_bed';
    communication: 'email' | 'phone' | 'whatsapp';
  };
  marketing?: {
    newsletter: boolean;
    promotions: boolean;
    whatsapp: boolean;
  };
}

export interface BookingRequest {
  rateId: string;
  hotel: Hotel;
  rate: Rate;
  searchParams: HotelSearchParams;
  bookingData: BookingFormData;
}

export interface PreBookingResponse {
  prebookId: string;
  status: 'confirmed' | 'pending' | 'failed';
  validUntil: string;
  hotel: Hotel;
  rate: Rate;
  totalPrice: Price;
  cancellationPolicy: {
    deadline: string;
    penalty: Price;
    description: string;
  };
}

export interface BookingResponse {
  bookingId: string;
  bookingReference: string;
  status: 'confirmed' | 'pending' | 'cancelled';
  hotel: Hotel;
  rate: Rate;
  guests: Guest[];
  contact: ContactInfo;
  checkIn: string;
  checkOut: string;
  nights: number;
  totalPrice: Price;
  breakdown: Array<{
    description: string;
    amount: Price;
  }>;
  cancellationPolicy: {
    deadline: string;
    penalty: Price;
    description: string;
  };
  voucher?: {
    url: string;
    reference: string;
  };
  confirmationEmail: {
    sent: boolean;
    to: string;
  };
  createdAt: string;
  confirmedAt?: string;
}

// ===== UI STATE TYPES =====

export interface HotelSearchState {
  isLoading: boolean;
  results: Hotel[];
  totalResults: number;
  error: string | null;
  searchParams: HotelSearchParams | null;
  searchId: string | null;
  currentPage: number;
  hasNextPage: boolean;
}

export interface HotelFiltersState {
  active: HotelFilters;
  applied: HotelFilters;
  isOpen: boolean;
  resultsCount: number;
}

export interface BookingState {
  step: 'search' | 'hotels' | 'details' | 'booking' | 'confirmation';
  selectedHotel: Hotel | null;
  selectedRate: Rate | null;
  prebooking: PreBookingResponse | null;
  booking: BookingResponse | null;
  formData: BookingFormData;
  isLoading: boolean;
  error: string | null;
}

export type ViewMode = 'list' | 'grid' | 'map';

export interface MapState {
  center: Coordinates;
  zoom: number;
  selectedHotel: string | null;
  hoveredHotel: string | null;
  bounds?: {
    north: number;
    south: number;
    east: number;
    west: number;
  };
}

// ===== API RESPONSE TYPES =====

export interface APIResponse<T> {
  success: boolean;
  data: T;
  message?: string;
  errors?: Array<{
    field: string;
    message: string;
  }>;
  metadata?: {
    timestamp: string;
    requestId: string;
    processingTime: number;
    [key: string]: any;
  };
}

export interface PaginatedResponse<T> {
  items: T[];
  pagination: {
    current: number;
    total: number;
    pageSize: number;
    totalItems: number;
    hasNext: boolean;
    hasPrevious: boolean;
  };
}

// ===== COMPONENT PROPS TYPES =====

export interface HotelCardProps {
  hotel: Hotel;
  searchParams: HotelSearchParams;
  onSelect: (hotel: Hotel) => void;
  onFavorite?: (hotelId: string) => void;
  isFavorite?: boolean;
  showDistance?: boolean;
  compact?: boolean;
}

export interface HotelFiltersProps {
  filters: HotelFilters;
  onFiltersChange: (filters: HotelFilters) => void;
  availableFilters: {
    priceRange: { min: number; max: number };
    amenities: HotelAmenity[];
    starRatings: number[];
    boardTypes: string[];
  };
  resultsCount: number;
  isOpen: boolean;
  onToggle: () => void;
}

export interface RateCardProps {
  rate: Rate;
  hotel: Hotel;
  searchParams: HotelSearchParams;
  onSelect: (rate: Rate) => void;
  isSelected?: boolean;
  showDetails?: boolean;
}

export interface BookingFormProps {
  hotel: Hotel;
  rate: Rate;
  searchParams: HotelSearchParams;
  onSubmit: (formData: BookingFormData) => void;
  onBack: () => void;
  isLoading?: boolean;
  error?: string;
}

// ===== ERROR TYPES =====

export interface HotelError {
  code: string;
  message: string;
  field?: string;
  details?: any;
}

export interface ValidationError extends HotelError {
  field: string;
  value: any;
}

// ===== ANALYTICS TYPES =====

export interface HotelAnalyticsEvent {
  event: 'hotel_search' | 'hotel_view' | 'rate_select' | 'booking_start' | 'booking_complete' | 'filter_apply';
  properties: {
    hotelId?: string;
    rateId?: string;
    destination?: string;
    checkIn?: string;
    checkOut?: string;
    adults?: number;
    children?: number;
    rooms?: number;
    price?: number;
    currency?: string;
    filters?: Partial<HotelFilters>;
    [key: string]: any;
  };
  timestamp: string;
  sessionId: string;
  userId?: string;
}

// ===== CACHE TYPES =====

export interface CacheEntry<T> {
  data: T;
  timestamp: number;
  expiresAt: number;
  key: string;
}

export interface CacheConfig {
  ttl: number; // seconds
  maxSize: number;
  strategy: 'lru' | 'fifo' | 'ttl';
}

// ===== FORM VALIDATION TYPES =====

export interface FormField<T> {
  value: T;
  error?: string;
  isValid: boolean;
  isDirty: boolean;
  isTouched: boolean;
}

export interface HotelSearchFormState {
  destination: FormField<string>;
  checkIn: FormField<Date>;
  checkOut: FormField<Date>;
  adults: FormField<number>;
  children: FormField<number>;
  childrenAges: FormField<number[]>;
  rooms: FormField<number>;
  isValid: boolean;
  isSubmitting: boolean;
}

export interface BookingFormState {
  guests: Array<{
    title: FormField<string>;
    firstName: FormField<string>;
    lastName: FormField<string>;
  }>;
  contact: {
    email: FormField<string>;
    phone: FormField<string>;
    whatsapp: FormField<string>;
  };
  specialRequests: FormField<string>;
  terms: FormField<boolean>;
  marketing: FormField<boolean>;
  isValid: boolean;
  isSubmitting: boolean;
}

// ===== UTILITY TYPES =====

export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

export type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;

// ===== CONSTANTS =====

export const HOTEL_AMENITY_CATEGORIES = [
  'general',
  'business', 
  'connectivity',
  'food',
  'recreation',
  'services',
  'transportation'
] as const;

export const ROOM_AMENITY_CATEGORIES = [
  'comfort',
  'entertainment',
  'food',
  'bathroom',
  'technology'
] as const;

export const BOARD_TYPES = [
  'room_only',
  'breakfast',
  'half_board', 
  'full_board',
  'all_inclusive'
] as const;

export const GUEST_TITLES = [
  'Mr',
  'Mrs', 
  'Ms',
  'Miss',
  'Dr',
  'Prof'
] as const;

export const SORT_FIELDS = [
  'price',
  'rating',
  'distance',
  'stars',
  'popularity'
] as const;

export const CURRENCIES = [
  'USD',
  'EUR',
  'BRL',
  'GBP',
  'CAD',
  'AUD'
] as const;

// ===== TYPE GUARDS =====

export function isHotel(obj: any): obj is Hotel {
  return obj && typeof obj.id === 'string' && typeof obj.name === 'string';
}

export function isRate(obj: any): obj is Rate {
  return obj && typeof obj.id === 'string' && typeof obj.rateId === 'string';
}

export function isValidSearchParams(obj: any): obj is HotelSearchParams {
  return obj && 
    typeof obj.destination === 'string' &&
    obj.checkIn instanceof Date &&
    obj.checkOut instanceof Date &&
    typeof obj.adults === 'number' &&
    typeof obj.rooms === 'number';
}

// ===== DEFAULT VALUES =====

export const DEFAULT_SEARCH_PARAMS: HotelSearchParams = {
  destination: '',
  destinationType: 'city',
  checkIn: new Date(),
  checkOut: new Date(Date.now() + 24 * 60 * 60 * 1000), // Tomorrow
  adults: 2,
  children: 0,
  childrenAges: [],
  rooms: 1,
  currency: 'USD'
};

export const DEFAULT_FILTERS: HotelFilters = {
  priceRange: { min: 0, max: 10000 },
  starRating: [],
  guestRating: 0,
  amenities: [],
  boardTypes: [],
  hotelChains: [],
  distanceFromCenter: 50,
  paymentOptions: [],
  cancellationPolicy: 'all',
  instantConfirmation: false
};

export const DEFAULT_BOOKING_FORM: BookingFormData = {
  guests: [],
  contact: {
    email: '',
    phone: '',
    whatsapp: ''
  },
  specialRequests: '',
  marketing: {
    newsletter: false,
    promotions: false,
    whatsapp: false
  }
};

// Export all types
export type {
  // Re-export commonly used types
  Hotel as HotelType,
  Rate as RateType,
  HotelSearchParams as SearchParams,
  BookingFormData as BookingForm,
  HotelFilters as Filters
};