import { NextRequest, NextResponse } from 'next/server';
import { executeAutoRestart } from '../../email-marketing/route';

// üîÑ CRON JOB para rein√≠cio autom√°tico de campanhas
// Este endpoint pode ser chamado por servi√ßos externos como:
// - GitHub Actions (scheduled workflows)
// - Vercel Cron Jobs
// - cron-job.org
// - Zapier/Make.com
// - Qualquer servi√ßo de agendamento

export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ CRON: Executando verifica√ß√£o autom√°tica de campanhas...');
    
    // Chamar diretamente a fun√ß√£o de auto-restart (sem HTTP fetch)
    const result = await executeAutoRestart();
    
    if (result.success) {
      console.log('‚úÖ CRON: Auto-restart executado com sucesso', result.data);
      
      return NextResponse.json({
        success: true,
        message: '‚úÖ Verifica√ß√£o autom√°tica de campanhas executada via CRON',
        timestamp: new Date().toISOString(),
        details: result.data,
        summary: result.data?.message || 'Processo conclu√≠do',
        nextRun: 'Em 5-10 minutos (recomendado)'
      });
    } else {
      console.error('‚ùå CRON: Erro no auto-restart:', result.error);
      
      return NextResponse.json({
        success: false,
        message: '‚ùå Erro na verifica√ß√£o autom√°tica via CRON',
        error: result.error,
        timestamp: new Date().toISOString()
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå CRON: Erro cr√≠tico no sistema de auto-restart:', error);
    
    return NextResponse.json({
      success: false,
      message: '‚ùå Erro cr√≠tico no sistema de auto-restart via CRON',
      error: error instanceof Error ? error.message : 'Erro desconhecido',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

// POST tamb√©m suportado para flexibilidade
export async function POST(request: NextRequest) {
  return GET(request);
}

// üìã INSTRU√á√ïES DE USO:
/*
  CONFIGURA√á√ÉO DE CRON JOBS EXTERNOS:

  1. URL para agendar: https://www.fly2any.com/api/cron/email-auto-restart
  2. Frequ√™ncia recomendada: A cada 5 minutos
  3. M√©todo HTTP: GET ou POST
  4. Monitoramento: Verificar logs para status de sucesso

  EXEMPLOS DE CONFIGURA√á√ÉO:

  GitHub Actions (.github/workflows/email-auto-restart.yml):
  - Criar workflow com schedule: cron '* /5 * * * *' (sem espa√ßo ap√≥s *)
  - Job: curl -X GET https://www.fly2any.com/api/cron/email-auto-restart

  cron-job.org:
  - URL: https://www.fly2any.com/api/cron/email-auto-restart
  - Intervalo: * /5 * * * * (a cada 5 minutos, sem espa√ßo ap√≥s *)
  - M√©todo: GET

  Vercel Cron (vercel.json):
  - Adicionar crons array com path e schedule
  - Path: "/api/cron/email-auto-restart"
  - Schedule: "* /5 * * * *" (sem espa√ßo ap√≥s *)

  Comando curl local para teste:
  curl -X GET https://www.fly2any.com/api/cron/email-auto-restart

  BENEF√çCIOS DO SISTEMA:
  - Campanhas nunca ficam travadas por mais de 5 minutos
  - Rein√≠cio autom√°tico sem interven√ß√£o manual
  - Logs detalhados para monitoramento
  - Melhoria na taxa de entrega de emails
  - Sistema robusto e confi√°vel
*/