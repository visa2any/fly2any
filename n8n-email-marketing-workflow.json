{
  "name": "Email Marketing Campaign - Fly2Any",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "email-marketing-final",
        "options": {}
      },
      "id": "8c1bb8c1-a569-4e24-9c87-2c70c0e7e1a5",
      "name": "Webhook Email Marketing",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [200, 300],
      "webhookId": "c4b5d2a1-3f7e-4b2c-9d8e-1a2b3c4d5e6f"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8f8e1234-5678-9abc-def0-123456789abc",
              "leftValue": "={{ $json.contacts }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2d8f7a3c-9e1b-4f2d-8c3a-7b6e5d4c3b2a",
      "name": "Check Valid Campaign Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [400, 300]
    },
    {
      "parameters": {
        "jsCode": "// Processar dados da campanha\nconst campaignData = $input.first().json;\n\n// Validar dados obrigat√≥rios\nif (!campaignData.campaignId || !campaignData.subject || !campaignData.contacts) {\n  throw new Error('Dados da campanha incompletos');\n}\n\n// Preparar contatos para envio\nconst contacts = campaignData.contacts;\nconst batchSize = 10; // 10 emails por lote conforme especificado\nconst batches = [];\n\n// Dividir contatos em lotes\nfor (let i = 0; i < contacts.length; i += batchSize) {\n  const batch = contacts.slice(i, i + batchSize);\n  batches.push({\n    batchNumber: Math.floor(i / batchSize) + 1,\n    totalBatches: Math.ceil(contacts.length / batchSize),\n    contacts: batch,\n    campaignId: campaignData.campaignId,\n    campaignName: campaignData.campaignName,\n    subject: campaignData.subject,\n    htmlContent: campaignData.htmlContent,\n    textContent: campaignData.textContent || 'Vers√£o texto do email',\n    timestamp: new Date().toISOString()\n  });\n}\n\nconsole.log(`üìß Campanha processada: ${batches.length} lotes de at√© ${batchSize} emails`);\n\nreturn batches.map(batch => ({ json: batch }));"
      },
      "id": "9a7b6c5d-4e3f-2a1b-9c8d-7e6f5a4b3c2d",
      "name": "Process Campaign Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 200]
    },
    {
      "parameters": {
        "authentication": "generic",
        "genericAuthType": "httpBasicAuth",
        "nodeCredentialType": "gmailApi",
        "requestMethod": "POST",
        "url": "https://gmail.googleapis.com/gmail/v1/users/me/messages/send",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.gmailOAuth2Api.accessToken }}"
            },
            {
              "name": "Content-Type", 
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ \n  {\n    \"raw\": Buffer.from(\n      `To: ${ $json.contacts.map(c => c.email).join(',') }\\n` +\n      `Subject: ${ $json.subject }\\n` +\n      `Content-Type: text/html; charset=utf-8\\n\\n` +\n      $json.htmlContent.replace(/{{nome}}/g, $json.contacts[0]?.nome || 'Cliente')\n    ).toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  }\n}}",
        "options": {}
      },
      "id": "5f8e2d1c-3a7b-9e4f-6c2d-8a1b5e3f7c9d",
      "name": "Send Gmail Batch",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 200],
      "credentials": {
        "gmailOAuth2Api": {
          "id": "gmail-credentials-id"
        }
      }
    },
    {
      "parameters": {
        "unit": "seconds",
        "amount": 20
      },
      "id": "7c9e4f2a-1b6d-8e3a-5f7c-2d9a6b4e8f1c",
      "name": "Wait 20 seconds",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "jsCode": "// Log resultado do envio e preparar resposta\nconst batchData = $input.first().json;\nconst batchNumber = batchData.batchNumber;\nconst totalBatches = batchData.totalBatches;\nconst emailsSent = batchData.contacts.length;\n\nconsole.log(`‚úÖ Lote ${batchNumber}/${totalBatches} enviado: ${emailsSent} emails`);\n\n// Preparar resposta de sucesso\nreturn [{\n  json: {\n    success: true,\n    campaignId: batchData.campaignId,\n    batchNumber: batchNumber,\n    totalBatches: totalBatches,\n    emailsSent: emailsSent,\n    timestamp: new Date().toISOString(),\n    message: `Lote ${batchNumber}/${totalBatches} enviado com sucesso`\n  }\n}];"
      },
      "id": "3e6f9a2b-5c8d-1f4e-7a9b-6d2c5f8e1a3b",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ \n  {\n    \"success\": true,\n    \"message\": \"Campanha de email marketing processada com sucesso\",\n    \"campaignId\": $json.campaignId,\n    \"totalBatches\": $json.totalBatches,\n    \"processedAt\": $json.timestamp\n   n}}",
        "options": {}
      },
      "id": "1a4b7e2c-9f6d-3e8a-5c2b-8d1f4a7e3c6b",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1400, 200]
    },
    {
      "parameters": {
        "jsCode": "// Tratar erro e preparar resposta de erro\nconst error = $input.first().json;\n\nconsole.error('‚ùå Erro no processamento da campanha:', error);\n\nreturn [{\n  json: {\n    success: false,\n    error: error.message || 'Erro desconhecido',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "4d9a6b3e-8f1c-2e7d-5a8b-1c4f7e9a2d6b",
      "name": "Handle Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ \n  {\n    \"success\": false,\n    \"error\": $json.error,\n    \"message\": \"Erro ao processar campanha de email marketing\",\n    \"timestamp\": $json.timestamp\n  }\n}}",
        "options": {}
      },
      "id": "8b2f5e9a-7c4d-1a6e-3f8b-6d2a5c8e1f4b",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [800, 400]
    }
  ],
  "connections": {
    "Webhook Email Marketing": {
      "main": [
        [
          {
            "node": "Check Valid Campaign Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Valid Campaign Data": {
      "main": [
        [
          {
            "node": "Process Campaign Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Error", 
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Campaign Data": {
      "main": [
        [
          {
            "node": "Send Gmail Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Gmail Batch": {
      "main": [
        [
          {
            "node": "Wait 20 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 20 seconds": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCreatedBy": "Claude Code",
    "description": "Workflow completo para campanhas de email marketing da Fly2Any com rate limiting e processamento em lotes"
  },
  "id": "email-marketing-fly2any"
}