// Sistema de Automa√ß√£o Inteligente - Detec√ß√£o de Intent e Respostas Contextuais
// IA para classifica√ß√£o autom√°tica de mensagens e roteamento inteligente

export interface Intent {
  id: string;
  name: string;
  description: string;
  keywords: string[];
  patterns: RegExp[];
  confidence_threshold: number;
  category: 'sales' | 'support' | 'billing' | 'general';
  priority: 'low' | 'normal' | 'high' | 'urgent';
  auto_response?: string;
  routing_rules?: {
    department?: string;
    agent_skills?: string[];
    escalate_after?: number; // minutes
  };
}

export interface IntentDetectionResult {
  intent: Intent | null;
  confidence: number;
  extracted_entities: Record<string, string>;
  suggested_response?: string;
  routing_recommendation?: {
    department: string;
    agent_skills: string[];
    priority: string;
  };
}

export interface CustomerContext {
  id: number;
  type: 'prospect' | 'customer' | 'vip';
  previous_purchases: boolean;
  last_interaction_date?: Date;
  preferred_language: string;
  timezone: string;
  conversation_history: Array<{
    channel: string;
    last_message: string;
    resolved: boolean;
    satisfaction?: number;
  }>;
}

// Base de conhecimento de intents
const INTENT_DATABASE: Intent[] = [
  // VENDAS / COTA√á√ïES
  {
    id: 'flight_quote_request',
    name: 'Solicita√ß√£o de Cota√ß√£o de Voo',
    description: 'Cliente solicitando cota√ß√£o para voos',
    keywords: ['cota√ß√£o', 'pre√ßo', 'valor', 'quanto custa', 'passagem', 'voo', 'bilhete', 'ticket'],
    patterns: [
      /quero.*cota[√ßc][√£a]o/i,
      /quanto.*custa.*voo/i,
      /pre[√ßc]o.*passagem/i,
      /bilhete.*para/i,
      /voo.*de.*para/i
    ],
    confidence_threshold: 0.7,
    category: 'sales',
    priority: 'high',
    auto_response: `‚úàÔ∏è Perfeito! Para uma cota√ß√£o personalizada, preciso de:

üìç Origem e destino
üìÖ Datas de ida e volta  
üë• N√∫mero de passageiros
üé´ Classe preferida (econ√¥mica/executiva)

üöÄ Cota√ß√£o gratuita em at√© 2h!
üí¨ Continue aqui ou WhatsApp: (555) 123-4567`,
    routing_rules: {
      department: 'sales',
      agent_skills: ['sales', 'booking', 'pricing']
    }
  },

  {
    id: 'destination_inquiry',
    name: 'Consulta sobre Destinos',
    description: 'Cliente perguntando sobre destinos dispon√≠veis',
    keywords: ['destinos', 'onde voam', 'cidades', 'rotas', 'lugares'],
    patterns: [
      /quais.*destinos/i,
      /voam.*para.*onde/i,
      /cidades.*atendem/i,
      /rotas.*dispon[√≠i]veis/i
    ],
    confidence_threshold: 0.6,
    category: 'sales',
    priority: 'normal',
    auto_response: `üåé Voamos para principais destinos EUA-Brasil:

üá∫üá∏ Estados Unidos:
‚Ä¢ Miami, Orlando, New York
‚Ä¢ Los Angeles, Chicago, Dallas

üáßüá∑ Brasil:  
‚Ä¢ S√£o Paulo, Rio de Janeiro
‚Ä¢ Bras√≠lia, Salvador, Recife

‚úàÔ∏è Quer uma cota√ß√£o espec√≠fica?
üì± Continue aqui ou WhatsApp: (555) 123-4567`,
    routing_rules: {
      department: 'sales',
      agent_skills: ['sales', 'destinations']
    }
  },

  // SUPORTE T√âCNICO
  {
    id: 'booking_modification',
    name: 'Altera√ß√£o de Reserva',
    description: 'Cliente quer alterar/cancelar reserva existente',
    keywords: ['alterar', 'cancelar', 'remarcar', 'trocar data', 'mudar voo', 'modificar'],
    patterns: [
      /alterar.*reserva/i,
      /cancelar.*voo/i,
      /remarcar.*passagem/i,
      /trocar.*data/i,
      /modificar.*bilhete/i
    ],
    confidence_threshold: 0.8,
    category: 'support',
    priority: 'high',
    auto_response: `üîÑ Entendi que precisa alterar sua reserva.

Para agilizar, tenha em m√£os:
üé´ N√∫mero da reserva/localizador
üìß Email usado na compra
üìÖ Nova data desejada

‚ö†Ô∏è Altera√ß√µes podem ter taxas
üí¨ Um especialista te ajudar√° agora!`,
    routing_rules: {
      department: 'support',
      agent_skills: ['booking_changes', 'customer_service'],
      escalate_after: 5
    }
  },

  {
    id: 'flight_status',
    name: 'Status do Voo',
    description: 'Cliente consultando status/hor√°rio do voo',
    keywords: ['status', 'hor√°rio', 'atraso', 'cancelado', 'confirmado', 'port√£o'],
    patterns: [
      /status.*voo/i,
      /hor[√°a]rio.*voo/i,
      /voo.*atrasado/i,
      /foi.*cancelado/i,
      /confirmado.*voo/i
    ],
    confidence_threshold: 0.7,
    category: 'support',
    priority: 'urgent',
    auto_response: `‚úàÔ∏è Vou verificar o status do seu voo!

Por favor, informe:
üé´ N√∫mero do voo (ex: FLY123)
üìÖ Data do voo
üõ´ Origem ‚Üí Destino

üì± Tamb√©m pode consultar em: flycompany.com/status
‚ö° Status em tempo real!`,
    routing_rules: {
      department: 'support',
      agent_skills: ['flight_ops', 'real_time_support']
    }
  },

  // FINANCEIRO / PAGAMENTO
  {
    id: 'payment_issue',
    name: 'Problema com Pagamento',
    description: 'Cliente com dificuldades no pagamento',
    keywords: ['pagamento', 'cart√£o', 'recusado', 'erro', 'cobran√ßa', 'fatura'],
    patterns: [
      /problema.*pagamento/i,
      /cart[√£a]o.*recusado/i,
      /erro.*pagamento/i,
      /cobran[√ßc]a.*errada/i,
      /n[√£a]o.*consegui.*pagar/i
    ],
    confidence_threshold: 0.8,
    category: 'billing',
    priority: 'high',
    auto_response: `üí≥ Entendo sua dificuldade com o pagamento.

Nosso especialista financeiro vai ajudar com:
‚úÖ Valida√ß√£o de cart√£o
‚úÖ Parcelamento dispon√≠vel  
‚úÖ M√©todos alternativos
‚úÖ Resolu√ß√£o de cobran√ßas

üîí Atendimento seguro e confidencial
üí¨ Conectando com especialista...`,
    routing_rules: {
      department: 'billing',
      agent_skills: ['payments', 'billing', 'finance'],
      escalate_after: 3
    }
  },

  {
    id: 'refund_request',
    name: 'Solicita√ß√£o de Reembolso',
    description: 'Cliente solicitando reembolso',
    keywords: ['reembolso', 'estorno', 'devolu√ß√£o', 'cancelamento', 'dinheiro de volta'],
    patterns: [
      /quero.*reembolso/i,
      /estorno.*cart[√£a]o/i,
      /devolu[√ßc][√£a]o.*dinheiro/i,
      /cancelar.*e.*reembolsar/i
    ],
    confidence_threshold: 0.9,
    category: 'billing',
    priority: 'high',
    auto_response: `üí∞ Solicita√ß√£o de reembolso recebida.

Para processar, preciso de:
üé´ N√∫mero da reserva
üìß Email da compra
üìÖ Motivo do cancelamento
üí≥ Dados do cart√£o (√∫ltimos 4 d√≠gitos)

‚è±Ô∏è Prazo: 7-10 dias √∫teis
üìã Sujeito √†s pol√≠ticas da tarifa`,
    routing_rules: {
      department: 'billing',
      agent_skills: ['refunds', 'billing', 'policy'],
      escalate_after: 2
    }
  },

  // GERAL / INFORMA√á√ïES
  {
    id: 'general_greeting',
    name: 'Sauda√ß√£o Geral',
    description: 'Mensagens de sauda√ß√£o e primeiro contato',
    keywords: ['oi', 'ol√°', 'bom dia', 'boa tarde', 'boa noite', 'hello', 'hi'],
    patterns: [
      /^(oi|ol[√°a]|bom\s+dia|boa\s+tarde|boa\s+noite)$/i,
      /^(hello|hi|hey)$/i
    ],
    confidence_threshold: 0.5,
    category: 'general',
    priority: 'normal',
    auto_response: `üõ´ Ol√°! Bem-vindo √† Fly2Any!

‚úàÔ∏è Especialistas em voos EUA ‚Üî Brasil
üéØ Como posso ajudar hoje?

üöÄ Principais servi√ßos:
‚Ä¢ Cota√ß√µes personalizadas
‚Ä¢ Altera√ß√µes de reserva  
‚Ä¢ Suporte 24/7
‚Ä¢ Check-in online

üí¨ Continue aqui ou WhatsApp: (555) 123-4567`,
    routing_rules: {
      department: 'sales',
      agent_skills: ['customer_service', 'general']
    }
  },

  {
    id: 'company_info',
    name: 'Informa√ß√µes da Empresa',
    description: 'Cliente perguntando sobre a empresa',
    keywords: ['empresa', 'quem s√£o', 'confi√°vel', 'seguro', 'licen√ßa', 'sobre'],
    patterns: [
      /sobre.*empresa/i,
      /quem.*s[√£a]o.*voc[√™e]s/i,
      /empresa.*confi[√°a]vel/i,
      /[√©e].*seguro/i
    ],
    confidence_threshold: 0.6,
    category: 'general',
    priority: 'normal',
    auto_response: `üè¢ Sobre a Fly2Any:

‚úÖ +10 anos no mercado
‚úÖ Licenciada IATA 
‚úÖ +50.000 clientes satisfeitos
‚úÖ Especialistas EUA-Brasil
‚úÖ Suporte 24/7 em portugu√™s

üèÜ Pr√™mios:
‚Ä¢ Melhor Ag√™ncia Online 2023
‚Ä¢ Excel√™ncia em Atendimento

üîí 100% Seguro - Pagamento protegido
üìû SAC: (555) 123-4567`,
    routing_rules: {
      department: 'sales',
      agent_skills: ['company_info', 'sales']
    }
  }
];

// Classe principal para detec√ß√£o de intent
export class SmartAutomationEngine {
  
  // Detectar intent da mensagem
  static detectIntent(message: string, customerContext?: CustomerContext): IntentDetectionResult {
    const normalizedMessage = this.normalizeMessage(message);
    let bestMatch: { intent: Intent; confidence: number } | null = null;
    
    // Avaliar cada intent
    for (const intent of INTENT_DATABASE) {
      const confidence = this.calculateIntentConfidence(normalizedMessage, intent, customerContext);
      
      if (confidence >= intent.confidence_threshold) {
        if (!bestMatch || confidence > bestMatch.confidence) {
          bestMatch = { intent, confidence };
        }
      }
    }
    
    if (!bestMatch) {
      return {
        intent: null,
        confidence: 0,
        extracted_entities: {},
        suggested_response: this.getGenericResponse(customerContext),
        routing_recommendation: {
          department: 'sales',
          agent_skills: ['general'],
          priority: 'normal'
        }
      };
    }
    
    const entities = this.extractEntities(normalizedMessage, bestMatch.intent);
    const suggestedResponse = this.generateContextualResponse(bestMatch.intent, entities, customerContext);
    
    return {
      intent: bestMatch.intent,
      confidence: bestMatch.confidence,
      extracted_entities: entities,
      suggested_response: suggestedResponse,
      routing_recommendation: bestMatch.intent.routing_rules ? {
        department: bestMatch.intent.routing_rules.department || 'sales',
        agent_skills: bestMatch.intent.routing_rules.agent_skills || ['general'],
        priority: bestMatch.intent.priority
      } : undefined
    };
  }
  
  // Normalizar mensagem para an√°lise
  private static normalizeMessage(message: string): string {
    return message
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Remove acentos
      .replace(/[^\w\s]/g, ' ') // Remove pontua√ß√£o
      .replace(/\s+/g, ' ') // Normaliza espa√ßos
      .trim();
  }
  
  // Calcular confian√ßa do intent
  private static calculateIntentConfidence(message: string, intent: Intent, context?: CustomerContext): number {
    let confidence = 0;
    
    // Pontua√ß√£o por palavras-chave
    const keywordMatches = intent.keywords.filter(keyword => 
      message.includes(keyword.toLowerCase())
    ).length;
    
    const keywordScore = (keywordMatches / intent.keywords.length) * 0.6;
    confidence += keywordScore;
    
    // Pontua√ß√£o por padr√µes regex
    const patternMatches = intent.patterns.filter(pattern => 
      pattern.test(message)
    ).length;
    
    const patternScore = (patternMatches / intent.patterns.length) * 0.3;
    confidence += patternScore;
    
    // Boost baseado no contexto do cliente
    if (context) {
      confidence += this.getContextualBoost(intent, context);
    }
    
    return Math.min(confidence, 1.0);
  }
  
  // Boost contextual baseado no perfil do cliente
  private static getContextualBoost(intent: Intent, context: CustomerContext): number {
    let boost = 0;
    
    // Cliente VIP tem prioridade
    if (context.type === 'vip' && intent.priority === 'high') {
      boost += 0.1;
    }
    
    // Hist√≥rico de compras influencia intents de vendas
    if (context.previous_purchases && intent.category === 'sales') {
      boost += 0.05;
    }
    
    // Intera√ß√µes recentes influenciam intent de suporte
    if (context.last_interaction_date) {
      const daysSinceLastInteraction = Math.floor(
        (Date.now() - context.last_interaction_date.getTime()) / (1000 * 60 * 60 * 24)
      );
      
      if (daysSinceLastInteraction <= 7 && intent.category === 'support') {
        boost += 0.05;
      }
    }
    
    // Hist√≥rico de problemas n√£o resolvidos
    const unresolvedIssues = context.conversation_history.filter(h => !h.resolved).length;
    if (unresolvedIssues > 0 && intent.category === 'support') {
      boost += 0.1;
    }
    
    return boost;
  }
  
  // Extrair entidades da mensagem
  private static extractEntities(message: string, intent: Intent): Record<string, string> {
    const entities: Record<string, string> = {};
    
    // Extrair datas
    const datePatterns = [
      /(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2,4})/g, // DD/MM/YYYY
      /(pr√≥xim[ao])\s+(segunda|ter√ßa|quarta|quinta|sexta|s√°bado|domingo)/gi,
      /(janeiro|fevereiro|mar√ßo|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/gi
    ];
    
    datePatterns.forEach(pattern => {
      const matches = message.match(pattern);
      if (matches) {
        entities.date = matches[0];
      }
    });
    
    // Extrair cidades/destinos
    const cityPatterns = [
      /(s√£o paulo|sp|rio de janeiro|rj|bras√≠lia|bsb|salvador|recife|fortaleza)/gi,
      /(miami|orlando|new york|nyc|los angeles|la|chicago|dallas)/gi
    ];
    
    cityPatterns.forEach(pattern => {
      const matches = message.match(pattern);
      if (matches) {
        entities.destination = matches[0];
      }
    });
    
    // Extrair n√∫meros (passageiros, valores, etc.)
    const numberPattern = /(\d+)\s*(passageiros?|pessoas?|adultos?)/gi;
    const numberMatch = message.match(numberPattern);
    if (numberMatch) {
      entities.passengers = numberMatch[0];
    }
    
    // Extrair localizador de reserva
    const locatorPattern = /[A-Z0-9]{6}/g;
    const locatorMatch = message.match(locatorPattern);
    if (locatorMatch && intent.category === 'support') {
      entities.booking_reference = locatorMatch[0];
    }
    
    return entities;
  }
  
  // Gerar resposta contextual
  private static generateContextualResponse(intent: Intent, entities: Record<string, string>, context?: CustomerContext): string {
    let response = intent.auto_response || '';
    
    // Personalizar por tipo de cliente
    if (context) {
      if (context.type === 'vip') {
        response = `üëë ${context.type.toUpperCase()} CLIENT\n\n` + response;
      }
      
      // Adicionar sauda√ß√£o personalizada baseada no hor√°rio/timezone
      const greeting = this.getTimeBasedGreeting(context.timezone, context.preferred_language);
      if (intent.id === 'general_greeting') {
        response = greeting + '\n\n' + response;
      }
    }
    
    // Substituir placeholders com entidades extra√≠das
    Object.entries(entities).forEach(([key, value]) => {
      response = response.replace(`{{${key}}}`, value);
    });
    
    return response;
  }
  
  // Resposta gen√©rica quando n√£o h√° intent detectado
  private static getGenericResponse(context?: CustomerContext): string {
    const baseResponse = `ü§ñ Ol√°! N√£o entendi perfeitamente sua solicita√ß√£o.

üìû Para melhor atendimento:
‚Ä¢ WhatsApp: (555) 123-4567
‚Ä¢ Email: support@fly2any.com
‚Ä¢ Chat ao vivo: dispon√≠vel agora

üîç Ou tente perguntar sobre:
‚Ä¢ Cota√ß√£o de voos
‚Ä¢ Altera√ß√£o de reserva
‚Ä¢ Status do voo
‚Ä¢ Informa√ß√µes gerais`;

    if (context?.type === 'vip') {
      return `üëë CLIENTE VIP\n\n` + baseResponse + `\n\n‚ö° Prioridade m√°xima no atendimento!`;
    }
    
    return baseResponse;
  }
  
  // Sauda√ß√£o baseada no hor√°rio
  private static getTimeBasedGreeting(timezone: string, language: string): string {
    const now = new Date();
    const hour = parseInt(now.toLocaleString('en-US', { 
      timeZone: timezone, 
      hour12: false, 
      hour: 'numeric' 
    }));
    
    if (language === 'pt-BR') {
      if (hour >= 5 && hour < 12) return 'üåÖ Bom dia';
      if (hour >= 12 && hour < 18) return '‚òÄÔ∏è Boa tarde';
      return 'üåô Boa noite';
    } else {
      if (hour >= 5 && hour < 12) return 'üåÖ Good morning';
      if (hour >= 12 && hour < 18) return '‚òÄÔ∏è Good afternoon';
      return 'üåô Good evening';
    }
  }
  
  // Verificar se deve escalar para agente humano
  static shouldEscalateToHuman(intent: Intent, confidence: number, context?: CustomerContext): boolean {
    // Sempre escalar para VIPs com problemas
    if (context?.type === 'vip' && intent.category === 'support') {
      return true;
    }
    
    // Escalar intents de alta prioridade
    if (intent.priority === 'urgent') {
      return true;
    }
    
    // Escalar se confian√ßa for baixa
    if (confidence < 0.6) {
      return true;
    }
    
    // Escalar problemas financeiros/reembolsos
    if (intent.category === 'billing') {
      return true;
    }
    
    // Escalar se cliente tem hist√≥rico de problemas n√£o resolvidos
    if (context?.conversation_history) {
      const unresolvedIssues = context.conversation_history.filter(h => !h.resolved).length;
      if (unresolvedIssues >= 2) {
        return true;
      }
    }
    
    return false;
  }
  
  // Obter lista de todos os intents dispon√≠veis
  static getAllIntents(): Intent[] {
    return [...INTENT_DATABASE];
  }
  
  // Buscar intents por categoria
  static getIntentsByCategory(category: Intent['category']): Intent[] {
    return INTENT_DATABASE.filter(intent => intent.category === category);
  }
  
  // Treinar/adicionar novo intent (para futuro machine learning)
  static addIntent(intent: Intent): void {
    INTENT_DATABASE.push(intent);
  }
  
  // Atualizar intent existente
  static updateIntent(intentId: string, updates: Partial<Intent>): boolean {
    const index = INTENT_DATABASE.findIndex(intent => intent.id === intentId);
    if (index === -1) return false;
    
    INTENT_DATABASE[index] = { ...INTENT_DATABASE[index], ...updates };
    return true;
  }
}

export default SmartAutomationEngine;