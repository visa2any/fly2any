{
  "name": "WhatsApp Automation - Fly2Any",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp",
        "options": {}
      },
      "name": "WhatsApp Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "whatsapp-fly2any"
    },
    {
      "parameters": {
        "jsCode": "// 🧠 ENHANCED: Process incoming WhatsApp message with lead detection\nconst body = $json.body;\nlet messageData = {};\nlet eventType = 'message';\n\n// Handle different webhook formats\nif (body.event === 'whatsapp_message_received') {\n  eventType = 'message';\n  messageData = {\n    from: body.data.from,\n    message: body.data.text,\n    contactName: body.data.contactName || '',\n    timestamp: body.data.timestamp,\n    messageId: body.data.messageId,\n    isNewConversation: body.data.isNewConversation\n  };\n} else if (body.event === 'whatsapp_lead_created') {\n  // 🆕 NEW: Handle lead creation events\n  eventType = 'lead_created';\n  messageData = {\n    from: body.data.phone,\n    leadData: body.data.leadData,\n    confidence: body.data.confidence,\n    timestamp: body.data.timestamp,\n    messageId: `lead_${Date.now()}`\n  };\n} else {\n  // Direct message format\n  eventType = 'message';\n  messageData = {\n    from: body.from || body.phone,\n    message: body.message || body.text,\n    contactName: body.contactName || body.name || '',\n    timestamp: body.timestamp || new Date().toISOString(),\n    messageId: body.messageId || `msg_${Date.now()}`,\n    isNewConversation: body.isNewConversation || false\n  };\n}\n\n// For lead events, return different processing\nif (eventType === 'lead_created') {\n  return {\n    eventType: 'lead_created',\n    from: messageData.from,\n    leadData: messageData.leadData,\n    confidence: messageData.confidence,\n    priority: messageData.confidence >= 70 ? 'high' : 'normal',\n    shouldNotifyHuman: true,\n    shouldCreateCampaign: messageData.confidence >= 60,\n    autoResponse: false\n  };\n}\n\n// Original message processing\nconst message = messageData.message.toLowerCase();\nlet intent = 'general';\nlet priority = 'normal';\n\n// Enhanced intent detection\nif (message.includes('urgente') || message.includes('emergência') || message.includes('problema')) {\n  intent = 'urgent';\n  priority = 'high';\n} else if (message.includes('voo') || message.includes('passagem') || message.includes('viagem')) {\n  intent = 'flight_inquiry';\n  priority = 'high';\n} else if (message.includes('hotel') || message.includes('hospedagem')) {\n  intent = 'hotel_inquiry';\n} else if (message.includes('carro') || message.includes('aluguel')) {\n  intent = 'car_rental';\n} else if (message.includes('preço') || message.includes('cotação') || message.includes('valor')) {\n  intent = 'pricing';\n  priority = 'high';\n} else if (message.includes('oi') || message.includes('olá') || message.includes('bom dia')) {\n  intent = 'greeting';\n} else if (message.includes('obrigad') || message.includes('valeu') || message.includes('tchau')) {\n  intent = 'thanks';\n}\n\n// Check business hours (EST)\nconst now = new Date();\nconst estTime = new Date(now.toLocaleString(\"en-US\", {timeZone: \"America/New_York\"}));\nconst hour = estTime.getHours();\nconst day = estTime.getDay();\nconst isBusinessHours = (day >= 1 && day <= 5 && hour >= 9 && hour < 18) || (day === 6 && hour >= 9 && hour < 14);\n\nreturn {\n  eventType: 'message',\n  ...messageData,\n  intent,\n  priority,\n  isBusinessHours,\n  shouldNotifyHuman: intent === 'urgent' || (isBusinessHours && messageData.isNewConversation) || ['flight_inquiry', 'pricing'].includes(intent),\n  autoResponse: !isBusinessHours || ['greeting', 'thanks'].includes(intent)\n};"
      },
      "name": "Process Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [480, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-lead-event",
              "leftValue": "={{ $json.eventType }}",
              "rightValue": "lead_created",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "name": "Is Lead Event?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [700, 300]
    },
    {
      "parameters": {
        "jsCode": "// 🎯 Process lead creation event\nconst leadData = $json.leadData;\nconst confidence = $json.confidence;\nconst phone = $json.from;\n\n// Generate lead summary\nconst summary = {\n  phone,\n  confidence,\n  origem: leadData.origem || 'Não informado',\n  destino: leadData.destino || 'Não informado',\n  dataPartida: leadData.dataPartida || 'Não informado',\n  passageiros: leadData.numeroPassageiros || 1,\n  intent: leadData.intent,\n  extractedServices: leadData.selectedServices || ['voos']\n};\n\n// Generate notification message\nconst message = `🆕 NOVO LEAD WHATSAPP (${confidence}% confiança)\n\n📱 Telefone: ${phone}\n📍 Rota: ${summary.origem} → ${summary.destino}\n📅 Data: ${summary.dataPartida}\n👥 Passageiros: ${summary.passageiros}\n🎯 Intenção: ${summary.intent}\n\n🔗 Ver no admin: ${process.env.NEXT_PUBLIC_APP_URL}/admin/leads`;\n\nreturn {\n  summary,\n  notificationMessage: message,\n  shouldCreateCampaign: confidence >= 60,\n  priority: confidence >= 70 ? 'high' : 'normal'\n};"
      },
      "name": "Process Lead Event",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [920, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "auto-response",
              "leftValue": "={{ $json.autoResponse }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "name": "Need Auto Response?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [920, 420]
    },
    {
      "parameters": {
        "jsCode": "// Generate appropriate auto-response\nconst intent = $json.intent;\nconst isBusinessHours = $json.isBusinessHours;\nconst hour = new Date().getHours();\n\nconst responses = {\n  greeting: '😊 Olá! Bem-vindo à Fly2Any! Como posso ajudar com sua viagem Brasil-EUA hoje?',\n  \n  flight_inquiry: `✈️ Perfeito! Para uma cotação de voos, preciso saber:\n\n📍 Origem e destino\n📅 Datas de ida e volta  \n👥 Quantos passageiros\n💺 Classe preferida\n\nPode me enviar esses detalhes?\n\n🎯 Cotação gratuita em até 2 horas!`,\n  \n  pricing: `💰 Nossos preços são imbatíveis! Alguns exemplos:\n\n✈️ Miami ↔ São Paulo: $650-900\n✈️ NY ↔ Rio de Janeiro: $720-1100  \n✈️ Orlando ↔ São Paulo: $680-950\n\n🎯 Cotação personalizada GRÁTIS em 2h!\n📞 Quer falar com um especialista agora?`,\n\n  hotel_inquiry: `🏨 Ótimo! Temos parcerias com os melhores hotéis:\n\n🌟 Destinos populares:\n• São Paulo - Centro/Paulista\n• Rio de Janeiro - Copacabana/Ipanema\n• Salvador - Pelourinho/Orla\n\n📍 Em qual cidade você se hospedará?\n📅 Quais as datas da estadia?`,\n\n  car_rental: `🚗 Aluguel de carros em todo o Brasil:\n\n🏢 Parceiros: Localiza, Hertz, Avis\n🚗 Categorias: Econômico, Executivo, SUV\n📍 Retirada: Aeroportos ou centros urbanos\n\nEm qual cidade você precisa?`,\n  \n  general: `😊 Entendi! Um dos nossos especialistas vai revisar sua mensagem e responder em breve.\n\n🎯 Enquanto isso, saiba que oferecemos:\n• ✈️ Voos Brasil ↔ EUA\n• 🏨 Hotéis no Brasil\n• 🚗 Aluguel de carros\n• 🛡️ Seguro viagem\n\nTem mais alguma pergunta?`\n};\n\nlet response = responses[intent] || responses.general;\n\n// Add after-hours message if needed\nif (!isBusinessHours) {\n  response += `\\n\\n🕐 Estamos fora do horário comercial, mas um especialista retornará sua mensagem pela manhã!\\n\\n⏰ Horário: Seg-Sex 9h-18h (EST)`;\n}\n\nreturn {\n  phone: $json.from,\n  message: response,\n  timestamp: new Date().toISOString()\n};"
      },
      "name": "Generate Auto Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [920, 180]
    },
    {
      "parameters": {
        "url": "={{ $env.NEXT_PUBLIC_APP_URL }}/api/whatsapp/send",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "phone",
              "value": "={{ $json.phone }}"
            },
            {
              "name": "message", 
              "value": "={{ $json.message }}"
            }
          ]
        }
      },
      "name": "Send Auto Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1140, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "notify-human",
              "leftValue": "={{ $json.shouldNotifyHuman }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "name": "Notify Human?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [920, 420]
    },
    {
      "parameters": {
        "url": "={{ $env.NEXT_PUBLIC_APP_URL }}/api/support/tickets",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "source",
              "value": "whatsapp"
            },
            {
              "name": "phone",
              "value": "={{ $json.from }}"
            },
            {
              "name": "name",
              "value": "={{ $json.contactName || 'Cliente WhatsApp' }}"
            },
            {
              "name": "subject",
              "value": "{{ $json.intent === 'urgent' ? 'URGENTE - ' : '' }}Nova mensagem WhatsApp"
            },
            {
              "name": "message",
              "value": "={{ $json.message }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.priority }}"
            },
            {
              "name": "department",
              "value": "sales"
            }
          ]
        }
      },
      "name": "Create Support Ticket",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1140, 420]
    },
    {
      "parameters": {
        "url": "https://fly2any.com/api/whatsapp/notify",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonParameters": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "name": "Email Notification via Resend",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1360, 300]
    }
  ],
  "connections": {
    "WhatsApp Webhook": {
      "main": [
        [
          {
            "node": "Process Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Message": {
      "main": [
        [
          {
            "node": "Is Lead Event?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Lead Event?": {
      "main": [
        [
          {
            "node": "Process Lead Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Need Auto Response?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Lead Event": {
      "main": [
        [
          {
            "node": "Email Notification via Resend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Need Auto Response?": {
      "main": [
        [
          {
            "node": "Generate Auto Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notify Human?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Auto Response": {
      "main": [
        [
          {
            "node": "Send Auto Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Human?": {
      "main": [
        [
          {
            "node": "Create Support Ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Support Ticket": {
      "main": [
        [
          {
            "node": "Email Notification via Resend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "whatsapp-automation-complete",
  "tags": ["whatsapp", "automation", "customer-service"]
}