{
  "name": "üîî Omnichannel Real-time Notifications - Premium",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "omnichannel-notifications",
        "options": {}
      },
      "id": "notification-webhook-trigger",
      "name": "üîî Notification Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "omnichannel-notifications"
    },
    {
      "parameters": {
        "functionCode": "// üéØ Smart Notification Processor\nconst notification = $input.all()[0].json;\n\n// Extract notification data\nconst {\n  type,\n  conversationId,\n  customerId,\n  agentId,\n  channel,\n  message,\n  priority = 'normal',\n  metadata = {}\n} = notification;\n\n// Determine notification urgency and routing\nlet urgencyLevel = 'normal';\nlet notificationMethods = ['websocket'];\nlet targetAudience = 'all_agents';\n\n// Priority-based routing\nswitch (priority) {\n  case 'urgent':\n    urgencyLevel = 'critical';\n    notificationMethods = ['websocket', 'push', 'sms', 'email'];\n    targetAudience = 'supervisors';\n    break;\n  case 'high':\n    urgencyLevel = 'high';\n    notificationMethods = ['websocket', 'push'];\n    targetAudience = 'department_agents';\n    break;\n  case 'normal':\n    notificationMethods = ['websocket'];\n    targetAudience = 'available_agents';\n    break;\n  case 'low':\n    notificationMethods = ['websocket'];\n    targetAudience = 'specific_agent';\n    break;\n}\n\n// Channel-specific customization\nlet channelIcon = 'üí¨';\nlet channelColor = '#3B82F6';\n\nswitch (channel) {\n  case 'whatsapp':\n    channelIcon = 'üí¨';\n    channelColor = '#25D366';\n    break;\n  case 'email':\n    channelIcon = '‚úâÔ∏è';\n    channelColor = '#EA4335';\n    break;\n  case 'phone':\n    channelIcon = 'üìû';\n    channelColor = '#6B7280';\n    break;\n  case 'webchat':\n    channelIcon = 'üåê';\n    channelColor = '#8B5CF6';\n    break;\n  case 'instagram':\n    channelIcon = 'üì∏';\n    channelColor = '#E4405F';\n    break;\n  case 'facebook':\n    channelIcon = 'üë•';\n    channelColor = '#1877F2';\n    break;\n  case 'telegram':\n    channelIcon = 'ü§ñ';\n    channelColor = '#0088CC';\n    break;\n}\n\n// Generate rich notification content\nconst notificationTitle = getNotificationTitle(type, channel, metadata);\nconst notificationBody = getNotificationBody(type, message, metadata);\n\n// Prepare notification data\nconst processedNotification = {\n  id: `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n  type,\n  timestamp: new Date().toISOString(),\n  urgency: urgencyLevel,\n  channel,\n  channelIcon,\n  channelColor,\n  title: notificationTitle,\n  body: notificationBody,\n  conversationId,\n  customerId,\n  agentId,\n  priority,\n  methods: notificationMethods,\n  audience: targetAudience,\n  metadata: {\n    ...metadata,\n    processed: true,\n    processingTime: Date.now()\n  },\n  actions: generateNotificationActions(type, conversationId, customerId)\n};\n\nfunction getNotificationTitle(type, channel, metadata) {\n  const channelName = getChannelDisplayName(channel);\n  \n  switch (type) {\n    case 'new_message':\n      return `Nova Mensagem - ${channelName}`;\n    case 'conversation_assigned':\n      return `Conversa Atribu√≠da - ${channelName}`;\n    case 'conversation_escalated':\n      return `‚ö†Ô∏è Conversa Escalada - ${channelName}`;\n    case 'system_alert':\n      return `üö® Alerta do Sistema`;\n    case 'sla_breach':\n      return `‚è∞ SLA Violado - ${channelName}`;\n    case 'customer_vip':\n      return `üëë Cliente VIP - ${channelName}`;\n    default:\n      return `Notifica√ß√£o - ${channelName}`;\n  }\n}\n\nfunction getNotificationBody(type, message, metadata) {\n  const customerName = metadata.customerName || metadata.sender?.name || 'Cliente';\n  \n  switch (type) {\n    case 'new_message':\n      return `${customerName}: ${message?.substring(0, 100) || 'Nova mensagem recebida'}`;\n    case 'conversation_assigned':\n      return `Conversa com ${customerName} foi atribu√≠da a voc√™`;\n    case 'conversation_escalated':\n      return `Conversa com ${customerName} foi escalada. A√ß√£o imediata necess√°ria.`;\n    case 'system_alert':\n      return message || 'Alerta do sistema requer aten√ß√£o';\n    case 'sla_breach':\n      return `SLA de resposta violado para ${customerName}. Responder imediatamente.`;\n    case 'customer_vip':\n      return `Cliente VIP ${customerName} iniciou conversa. Prioridade m√°xima.`;\n    default:\n      return message || 'Nova notifica√ß√£o recebida';\n  }\n}\n\nfunction getChannelDisplayName(channel) {\n  const channels = {\n    whatsapp: 'WhatsApp',\n    email: 'Email',\n    phone: 'SMS',\n    webchat: 'Chat Web',\n    instagram: 'Instagram',\n    facebook: 'Facebook',\n    telegram: 'Telegram'\n  };\n  return channels[channel] || 'Canal';\n}\n\nfunction generateNotificationActions(type, conversationId, customerId) {\n  const actions = [];\n  \n  if (conversationId) {\n    actions.push({\n      type: 'open_conversation',\n      label: 'Abrir Conversa',\n      url: `/admin/omnichannel/conversation/${conversationId}`,\n      primary: true\n    });\n  }\n  \n  if (customerId) {\n    actions.push({\n      type: 'view_customer',\n      label: 'Ver Cliente',\n      url: `/admin/customers/${customerId}`,\n      primary: false\n    });\n  }\n  \n  if (type === 'conversation_escalated') {\n    actions.push({\n      type: 'acknowledge',\n      label: 'Reconhecer',\n      action: 'acknowledge_escalation',\n      primary: true\n    });\n  }\n  \n  return actions;\n}\n\nreturn processedNotification;"
      },
      "id": "smart-notification-processor",
      "name": "üéØ Smart Processor",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"üéØ Smart Processor\"].json.urgency }}",
              "operation": "equal",
              "value2": "critical"
            }
          ]
        }
      },
      "id": "urgency-router",
      "name": "üö® Urgency Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [600, 300]
    },
    {
      "parameters": {
        "url": "={{ $node[\"üîî Notification Webhook\"].json.headers.origin }}/api/omnichannel/ws",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($node[\"üéØ Smart Processor\"].json) }}",
        "options": {
          "headers": {
            "Content-Type": "application/json",\n            "X-Notification-Priority": "={{ $node[\"üéØ Smart Processor\"].json.priority }}"\n          }\n        }\n      },\n      "id": "websocket-notification",\n      "name": "üì° WebSocket Broadcast",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 1,\n      "position": [800, 200]\n    },\n    {\n      "parameters": {\n        "functionCode": "// üì± Generate Push Notification\nconst notification = $node[\"üéØ Smart Processor\"].json;\n\nconst pushNotification = {\n  title: notification.title,\n  body: notification.body,\n  icon: `/icons/${notification.channel}.png`,\n  badge: '/icons/badge.png',\n  tag: `omnichannel-${notification.conversationId || notification.id}`,\n  requireInteraction: notification.urgency === 'critical',\n  actions: notification.actions.slice(0, 2).map(action => ({\n    action: action.type,\n    title: action.label,\n    icon: `/icons/${action.type}.png`\n  })),\n  data: {\n    conversationId: notification.conversationId,\n    customerId: notification.customerId,\n    channel: notification.channel,\n    url: notification.actions[0]?.url || '/admin/omnichannel'\n  },\n  timestamp: Date.now()\n};\n\nreturn {\n  notification: pushNotification,\n  urgency: notification.urgency,\n  audience: notification.audience,\n  agentIds: notification.agentId ? [notification.agentId] : null\n};"
      },
      "id": "push-notification-generator",
      "name": "üì± Push Generator",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [800, 100]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"üéØ Smart Processor\"].json.audience }}",
              "operation": "equal",
              "value2": "supervisors"
            }
          ]
        }
      },
      "id": "supervisor-alert-check",
      "name": "üë®‚Äçüíº Supervisor Alert?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1000, 100]
    },
    {
      "parameters": {
        "functionCode": "// üìß Email Alert for Critical Issues\nconst notification = $node[\"üéØ Smart Processor\"].json;\n\nconst emailData = {\n  to: process.env.SUPERVISOR_EMAIL || 'supervisors@fly2any.com',\n  subject: `üö® CR√çTICO: ${notification.title}`,\n  html: `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n      <div style=\"background: linear-gradient(135deg, #EF4444, #DC2626); color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n        <h1 style=\"margin: 0; font-size: 24px;\">üö® Alerta Cr√≠tico - Fly2Any</h1>\n      </div>\n      \n      <div style=\"background: white; padding: 30px; border: 1px solid #E5E7EB; border-top: none;\">\n        <div style=\"background: #FEF2F2; border: 1px solid #FECACA; border-radius: 6px; padding: 16px; margin-bottom: 20px;\">\n          <h2 style=\"color: #DC2626; margin: 0 0 10px 0; font-size: 18px;\">${notification.title}</h2>\n          <p style=\"color: #7F1D1D; margin: 0; font-size: 14px;\">${notification.body}</p>\n        </div>\n        \n        <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;\">\n          <div>\n            <h3 style=\"color: #374151; margin: 0 0 8px 0; font-size: 14px;\">üì± Canal</h3>\n            <p style=\"margin: 0; font-weight: bold; color: ${notification.channelColor};\">\n              ${notification.channelIcon} ${notification.channel?.toUpperCase()}\n            </p>\n          </div>\n          <div>\n            <h3 style=\"color: #374151; margin: 0 0 8px 0; font-size: 14px;\">‚ö° Urg√™ncia</h3>\n            <p style=\"margin: 0; font-weight: bold; color: #DC2626;\">\n              ${notification.urgency?.toUpperCase()}\n            </p>\n          </div>\n        </div>\n        \n        ${notification.conversationId ? `\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${process.env.BASE_URL}/admin/omnichannel/conversation/${notification.conversationId}\" \n             style=\"background: #DC2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;\">\n            üî• A√á√ÉO IMEDIATA NECESS√ÅRIA\n          </a>\n        </div>\n        ` : ''}\n        \n        <div style=\"border-top: 1px solid #E5E7EB; padding-top: 20px; margin-top: 20px;\">\n          <p style=\"color: #6B7280; font-size: 12px; margin: 0;\">\n            ‚è∞ Gerado em: ${new Date(notification.timestamp).toLocaleString('pt-BR')}<br>\n            üÜî ID: ${notification.id}<br>\n            ü§ñ Sistema Omnichannel Fly2Any\n          </p>\n        </div>\n      </div>\n    </div>\n  `,\n  text: `üö® ALERTA CR√çTICO\\n\\n${notification.title}\\n${notification.body}\\n\\nA√ß√£o imediata necess√°ria!\\n\\nID: ${notification.id}\\nHor√°rio: ${new Date().toLocaleString('pt-BR')}`\n};\n\nreturn emailData;"
      },
      "id": "critical-email-generator",
      "name": "üìß Critical Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1200, 50]
    },
    {
      "parameters": {
        "functionCode": "// üìû SMS Alert for Critical Issues\nconst notification = $node[\"üéØ Smart Processor\"].json;\n\nconst smsData = {\n  to: process.env.SUPERVISOR_PHONE || '+5511999999999',\n  message: `üö® FLY2ANY CR√çTICO\\n\\n${notification.title}\\n\\n${notification.body.substring(0, 120)}\\n\\n‚ö° A√á√ÉO IMEDIATA!\\nID: ${notification.id}`,\n  priority: 'urgent'\n};\n\nreturn smsData;"
      },
      "id": "critical-sms-generator",
      "name": "üìû Critical SMS",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1200, 150]
    },
    {
      "parameters": {
        "url": "={{ $env.RESEND_API_URL || 'https://api.resend.com/emails' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": "resendCredentials",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"from\": \"Fly2Any Alerts <alerts@fly2any.com>\",\n  \"to\": [\"{{ $node[\"üìß Critical Email\"].json.to }}\"],\n  \"subject\": \"{{ $node[\"üìß Critical Email\"].json.subject }}\",\n  \"html\": \"{{ $node[\"üìß Critical Email\"].json.html }}\",\n  \"text\": \"{{ $node[\"üìß Critical Email\"].json.text }}\"\n}"
      },
      "id": "send-critical-email",
      "name": "‚úâÔ∏è Send Email Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1400, 50]
    },
    {
      "parameters": {
        "url": "https://api.twilio.com/2010-04-01/Accounts/{{ $env.TWILIO_ACCOUNT_SID }}/Messages.json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "httpBasicAuth": "twilioCredentials",
        "sendBody": true,
        "bodyContentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "To",
              "value": "={{ $node[\"üìû Critical SMS\"].json.to }}"
            },
            {
              "name": "From",
              "value": "={{ $env.TWILIO_PHONE_NUMBER }}"
            },
            {
              "name": "Body",
              "value": "={{ $node[\"üìû Critical SMS\"].json.message }}"
            }
          ]
        }
      },
      "id": "send-critical-sms",
      "name": "üì± Send SMS Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1400, 150]
    },
    {
      "parameters": {
        "functionCode": "// üìä Notification Analytics\nconst notification = $node[\"üéØ Smart Processor\"].json;\nconst startTime = Date.now();\n\nconst analytics = {\n  workflow: 'omnichannel-realtime-notifications',\n  notificationId: notification.id,\n  timestamp: new Date().toISOString(),\n  type: notification.type,\n  channel: notification.channel,\n  urgency: notification.urgency,\n  priority: notification.priority,\n  audience: notification.audience,\n  methods: notification.methods,\n  processingTime: Date.now() - notification.metadata.processingTime,\n  delivery: {\n    websocket: true,\n    push: notification.methods.includes('push'),\n    email: notification.methods.includes('email'),\n    sms: notification.methods.includes('sms')\n  },\n  metadata: {\n    conversationId: notification.conversationId,\n    customerId: notification.customerId,\n    agentId: notification.agentId,\n    channelIcon: notification.channelIcon,\n    channelColor: notification.channelColor\n  }\n};\n\nconsole.log('üìä Notification Analytics:', JSON.stringify(analytics, null, 2));\n\n// Create metrics for dashboard\nconst metrics = {\n  totalNotifications: 1,\n  urgentNotifications: notification.urgency === 'critical' ? 1 : 0,\n  channelDistribution: {\n    [notification.channel]: 1\n  },\n  responseTime: analytics.processingTime,\n  deliveryMethods: notification.methods.length\n};\n\nreturn {\n  analytics,\n  metrics,\n  success: true\n};"
      },
      "id": "notification-analytics",
      "name": "üìä Analytics & Metrics",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [800, 400]
    },
    {
      "parameters": {
        "url": "={{ $node[\"üîî Notification Webhook\"].json.headers.origin }}/api/omnichannel/analytics",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($node[\"üìä Analytics & Metrics\"].json) }}",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "X-Analytics-Type": "notification"
          }
        }
      },
      "id": "send-analytics",
      "name": "üìà Send Analytics",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1000, 400]
    }
  ],
  "connections": {
    "üîî Notification Webhook": {
      "main": [
        [
          {
            "node": "üéØ Smart Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üéØ Smart Processor": {
      "main": [
        [
          {
            "node": "üö® Urgency Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üö® Urgency Router": {
      "main": [
        [
          {
            "node": "üì± Push Generator",
            "type": "main",
            "index": 0
          },
          {
            "node": "üì° WebSocket Broadcast",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üì° WebSocket Broadcast",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì± Push Generator": {
      "main": [
        [
          {
            "node": "üë®‚Äçüíº Supervisor Alert?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üë®‚Äçüíº Supervisor Alert?": {
      "main": [
        [
          {
            "node": "üìß Critical Email",
            "type": "main",
            "index": 0
          },
          {
            "node": "üìû Critical SMS",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "üìß Critical Email": {
      "main": [
        [
          {
            "node": "‚úâÔ∏è Send Email Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìû Critical SMS": {
      "main": [
        [
          {
            "node": "üì± Send SMS Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì° WebSocket Broadcast": {
      "main": [
        [
          {
            "node": "üìä Analytics & Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Analytics & Metrics": {
      "main": [
        [
          {
            "node": "üìà Send Analytics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "premium-notifications",
      "name": "Premium Notifications"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "premium-notifications-v1.0"
}