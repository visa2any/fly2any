{
  "name": "Email Marketing - Anti-Duplica√ß√£o 2025",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST", 
        "path": "email-marketing-final",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-updated",
      "name": "Email Webhook Updated",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "email-marketing-updated"
    },
    {
      "parameters": {
        "jsCode": "// üß† NOVA L√ìGICA: Processar dados da campanha com anti-duplica√ß√£o\nconst data = $json;\n\n// Extrair dados da campanha\nconst campaignData = {\n  action: data.action || 'send_campaign',\n  campaignId: data.campaignId || `campaign_${Date.now()}`,\n  subject: data.subject || 'Campanha Fly2Any',\n  htmlContent: data.htmlContent || data.message || '',\n  segment: data.segment || '',\n  limit: parseInt(data.limit || '500'),\n  priority: data.priority || 'normal'\n};\n\n// Log dados recebidos\nconsole.log(`üìß Campanha recebida: ${campaignData.campaignId}`);\nconsole.log(`üìä A√ß√£o: ${campaignData.action}`);\nconsole.log(`üë• Limite: ${campaignData.limit}`);\n\n// Preparar call para API com anti-duplica√ß√£o\nconst apiCall = {\n  method: 'POST',\n  url: `${process.env.NEXT_PUBLIC_APP_URL || 'https://www.fly2any.com'}/api/email-marketing`,\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Source': 'n8n-railway-updated',\n    'X-Campaign-ID': campaignData.campaignId\n  },\n  body: {\n    action: campaignData.action,\n    campaignId: campaignData.campaignId,\n    subject: campaignData.subject,\n    htmlContent: campaignData.htmlContent,\n    segment: campaignData.segment,\n    limit: campaignData.limit,\n    // üÜï NOVA FLAG: Usar sistema anti-duplica√ß√£o\n    useAntiDuplication: true,\n    batchProcessing: true\n  }\n};\n\nconsole.log(`üöÄ Enviando para API: ${apiCall.url}`);\n\nreturn {\n  campaignData,\n  apiCall,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "process-campaign",
      "name": "Process Campaign Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [420, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.apiCall.url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $json.apiCall.headers['Content-Type'] }}"
            },
            {
              "name": "X-Source", 
              "value": "={{ $json.apiCall.headers['X-Source'] }}"
            },
            {
              "name": "X-Campaign-ID",
              "value": "={{ $json.apiCall.headers['X-Campaign-ID'] }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonParameters": "={{ JSON.stringify($json.apiCall.body) }}",
        "options": {
          "timeout": 300000,
          "retry": {
            "enabled": true,
            "maxTries": 3
          }
        }
      },
      "id": "call-api-updated",
      "name": "Call Email API Updated",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [640, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-success",
      "name": "Check API Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [860, 300]
    },
    {
      "parameters": {
        "jsCode": "// üéâ SUCESSO: Processar resposta da API\nconst apiResponse = $json;\nconst campaignData = $node('Process Campaign Data').first().json.campaignData;\n\n// Extrair estat√≠sticas\nconst stats = {\n  campaignId: campaignData.campaignId,\n  totalContacts: apiResponse.data?.totalContacts || 0,\n  emailsSent: apiResponse.data?.emailsSent || 0,\n  newContacts: apiResponse.data?.newContacts || 0,\n  duplicatesSkipped: apiResponse.data?.duplicatesSkipped || 0,\n  processingTime: apiResponse.data?.processingTime || 0,\n  batchesProcessed: apiResponse.data?.batchesProcessed || 0,\n  antiDuplicationActive: true\n};\n\n// Log resultados\nconsole.log(`‚úÖ Campanha ${stats.campaignId} processada com sucesso`);\nconsole.log(`üìä Emails enviados: ${stats.emailsSent}`);\nconsole.log(`üîÑ Novos contatos: ${stats.newContacts}`);\nconsole.log(`üö´ Duplicatas evitadas: ${stats.duplicatesSkipped}`);\nconsole.log(`‚è±Ô∏è Tempo de processamento: ${stats.processingTime}ms`);\n\n// Preparar notifica√ß√£o de sucesso\nconst notification = {\n  type: 'success',\n  title: 'üìß Campanha Email Enviada com Sucesso',\n  message: `Campanha \"${campaignData.subject}\" processada:\\n\\n` +\n           `‚úÖ ${stats.emailsSent} emails enviados\\n` +\n           `üë• ${stats.newContacts} novos contatos processados\\n` +\n           `üö´ ${stats.duplicatesSkipped} duplicatas evitadas\\n` +\n           `‚è±Ô∏è Processamento: ${Math.round(stats.processingTime/1000)}s\\n\\n` +\n           `üîó Ver campanhas: ${process.env.NEXT_PUBLIC_APP_URL}/admin/email-marketing`,\n  timestamp: new Date().toISOString(),\n  campaignData,\n  stats\n};\n\nreturn {\n  ...notification,\n  success: true\n};"
      },
      "id": "success-notification",
      "name": "Success Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1080, 200]
    },
    {
      "parameters": {
        "jsCode": "// ‚ùå ERRO: Processar falha na API\nconst apiResponse = $json;\nconst campaignData = $node('Process Campaign Data').first().json.campaignData;\n\n// Extrair detalhes do erro\nconst errorDetails = {\n  campaignId: campaignData.campaignId,\n  error: apiResponse.error || 'Erro desconhecido',\n  statusCode: apiResponse.statusCode || 'N/A',\n  timestamp: new Date().toISOString()\n};\n\nconsole.error(`‚ùå Erro na campanha ${errorDetails.campaignId}: ${errorDetails.error}`);\n\n// Preparar notifica√ß√£o de erro\nconst notification = {\n  type: 'error',\n  title: '‚ùå Erro na Campanha Email',\n  message: `Falha na campanha \"${campaignData.subject}\":\\n\\n` +\n           `‚ùå Erro: ${errorDetails.error}\\n` +\n           `üìä Status: ${errorDetails.statusCode}\\n` +\n           `‚è∞ Hor√°rio: ${errorDetails.timestamp}\\n\\n` +\n           `üîß Verifique os logs e tente novamente.`,\n  timestamp: errorDetails.timestamp,\n  campaignData,\n  errorDetails\n};\n\nreturn {\n  ...notification,\n  success: false\n};"
      },
      "id": "error-notification",
      "name": "Error Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1080, 400]
    },
    {
      "parameters": {
        "url": "https://fly2any.com/api/notifications/email",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonParameters": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "send-notification",
      "name": "Send Admin Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({\n  success: $json.success,\n  message: $json.message,\n  type: $json.type,\n  timestamp: $json.timestamp,\n  stats: $json.stats || null,\n  errorDetails: $json.errorDetails || null\n}) }}"
      },
      "id": "response-final",
      "name": "Final Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1520, 300]
    }
  ],
  "connections": {
    "Email Webhook Updated": {
      "main": [
        [
          {
            "node": "Process Campaign Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Campaign Data": {
      "main": [
        [
          {
            "node": "Call Email API Updated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Email API Updated": {
      "main": [
        [
          {
            "node": "Check API Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check API Success": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Notification": {
      "main": [
        [
          {
            "node": "Send Admin Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Notification": {
      "main": [
        [
          {
            "node": "Send Admin Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Admin Notification": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "2.0.0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "antiDuplicationEnabled": true,
    "batchProcessingOptimized": true,
    "created": "2025-01-25",
    "description": "Email Marketing workflow with anti-duplication system and batch processing optimization"
  },
  "id": "email-marketing-anti-duplication-2025",
  "tags": ["email-marketing", "anti-duplication", "batch-processing", "2025-update"]
}